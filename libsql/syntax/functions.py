"""
    MySQL Functions
"""
from enum import Enum
from typing import Optional, Union
import datetime
from .operators import OP
from .expr_class import ExprABC as Ext, Func, NoArgsFunc

class FunctionsABC():
    """ Functions ABC """

class Flow(FunctionsABC):
    CASE = OP.CASE, 
    IF = Func(b'IF', [Ext, Ext, Ext])
    IFNULL = Func(b'IFNULL', [Ext, Ext])
    NULLIF = Func(b'NULLIF', [Ext, Ext])

class Math(FunctionsABC):
    ADD      = OP.ADD
    SUB      = OP.SUB
    MINUS    = OP.MINUS
    MUL      = OP.MUL
    DIV      = OP.DIV
    MOD_OP   = OP.MOD
    MOD_OP_  = OP.MOD_
    ABS      = Func(b'ABS'    , [float], float)
    ACOS     = Func(b'ACOS'   , [float], float)
    ATAN     = Func(b'ATAN'   , [float, Optional[float]], float)
    ATAN2    = Func(b'ATAN2'  , [float, float], float)
    CEIL     = Func(b'CEIL'   , [float], float)
    CEILING  = Func(b'CEILING', [float], float)
    CONV     = Func(b'CONV'   , [Ext, int, int], float)
    COS      = Func(b'COS'    , [float], float)
    COT      = Func(b'COT'    , [float], float)
    CRC32    = Func(b'CRC32'  , [float], float)
    DEGREES  = Func(b'DEGREES', [float], float)
    EXP      = Func(b'EXP'    , [float], float)
    FLOOR    = Func(b'FLOOR'  , [float], float)
    LN       = Func(b'LN'     , [float], float)
    LOG      = Func(b'LOG'    , [float, Optional[float]], float)
    LOG10    = Func(b'LOG10'  , [float], float)
    LOG2     = Func(b'LOG2'   , [float], float)
    MOD      = Func(b'MOD'    , [int, int], float)
    PI       = Func(b'PI'     , [], float)
    POW      = Func(b'POW'    , [float, float], float)
    POWER    = Func(b'POWER'  , [float, float], float)
    RADIANS  = Func(b'RADIANS', [float], float)
    RAND     = Func(b'RAND'   , [Optional[int]], float)
    ROUND    = Func(b'ROUND'  , [float, Optional[int]], float)
    SIGN     = Func(b'SIGN'   , [float], int)
    SIN      = Func(b'SIN'    , [float], float)
    SQRT     = Func(b'SQRT'   , [float], float)
    TAN      = Func(b'TAN'    , [float], float)
    TRUNCATE = Func(b'TRUNCATE', [float, int], float)

class DateTime(FunctionsABC):
    ADDDATE         = Func(b'ADDDATE')
    ADDTIME         = Func(b'ADDTIME')
    CONVERT_TZ      = Func(b'CONVERT_TZ')
    CURDATE         = Func(b'CURDATE', [], datetime.date)
    CURRENT_DATE    = Func(b'CURRENT_DATE', [], datetime.date)
    CURRENT_DATE_   = NoArgsFunc(b'CURRENT_DATE', datetime.date)
    CURTIME         = Func(b'CURTIME', [], datetime.time)
    CURRENT_TIME    = Func(b'CURRENT_TIME', [], datetime.time)
    CURRENT_TIME_   = NoArgsFunc(b'CURRENT_TIME', datetime.time)
    CURRENT_TIMESTAMP = Func(b'CURRENT_TIMESTAMP', [], datetime.time)
    DATE            = Func(b'DATE', [Ext], datetime.date)
    DATEDIFF        = Func(b'DATEDIFF', [Ext, Ext], int)
    DATE_ADD        = Func(b'DATE_ADD', [Ext, int], Ext)
    DATE_SUB        = Func(b'DATE_SUB', [Ext, int], Ext)
    DATE_FORMAT     = Func(b'DATE_FORMAT')
    DAY             = Func(b'DAY', [Union[datetime.date, datetime.datetime]], int)
    DAYOFMONTH      = Func(b'DAYOFMONTH', [Union[datetime.date, datetime.datetime]], int)
    DAYNAME         = Func(b'DAYNAME', [Union[datetime.date, datetime.datetime]], str)
    DAYOFWEEK       = Func(b'DAYOFWEEK', [Union[datetime.date, datetime.datetime]], int)
    DAYOFYEAR       = Func(b'DAYOFYEAR', [Union[datetime.date, datetime.datetime]], int)
    EXTRACT         = Func(b'EXTRACT')
    FROM_DAYS       = Func(b'FROM_DAYS')
    FROM_UNIXTIME   = Func(b'FROM_UNIXTIME')
    GET_FORMAT      = Func(b'GET_FORMAT')
    HOUR            = Func(b'HOUR', [Union[datetime.datetime, datetime.time]], int)
    LAST_DAY        = Func(b'LAST_DAY')
    LOCALTIME       = Func(b'LOCALTIME')
    LOCALTIMESTAMP  = Func(b'LOCALTIMESTAMP')
    MICROSECOND     = Func(b'MICROSECOND')
    MINUTE          = Func(b'MINUTE', [Union[datetime.datetime, datetime.time]], int)
    MONTH           = Func(b'MONTH', [Union[datetime.date, datetime.datetime]], int)
    MONTHNAME       = Func(b'MONTHNAME', [Union[datetime.date, datetime.datetime]], str)
    NOW             = Func(b'NOW', [int], datetime.datetime)
    PERIOD_ADD      = Func(b'PERIOD_ADD')
    PERIOD_DIFF     = Func(b'PERIOD_DIFF')
    QUARTER         = Func(b'QUARTER')
    SECOND          = Func(b'SECOND', [Union[datetime.datetime, datetime.time]], int)
    SEC_TO_TIME     = Func(b'SEC_TO_TIME')
    STR_TO_DATE     = Func(b'STR_TO_DATE')
    SUBTIME         = Func(b'SUBTIME')
    TIME            = Func(b'TIME', Union[datetime.datetime, datetime.time], datetime.time)
    TIMEDIFF        = Func(b'TIMEDIFF')
    TIMESTAMP       = Func(b'TIMESTAMP')
    TIMESTAMPADD    = Func(b'TIMESTAMPADD')
    TIMESTAMPDIFF   = Func(b'TIMESTAMPDIFF')
    TIME_FORMAT     = Func(b'TIME_FORMAT')
    TIME_TO_SEC     = Func(b'TIME_TO_SEC')
    TO_DAYS         = Func(b'TO_DAYS')
    TO_SECONDS      = Func(b'TO_SECONDS')
    UNIX_TIMESTAMP  = Func(b'UNIX_TIMESTAMP')
    UTC_DATE        = Func(b'UTC_DATE')
    UTC_TIME        = Func(b'UTC_TIME')
    UTC_TIMESTAMP   = Func(b'UTC_TIMESTAMP')
    WEEK            = Func(b'WEEK', [Union[datetime.date, datetime.datetime], Optional[int]], int)
    WEEKDAY         = Func(b'WEEKDAY', [Union[datetime.date, datetime.datetime]], int)
    WEEKOFYEAR      = Func(b'WEEKOFYEAR', [Union[datetime.date, datetime.datetime]], int)
    YEAR            = Func(b'YEAR', [Union[datetime.date, datetime.datetime]], int)
    YEARWEEK        = Func(b'YEARWEEK', [Union[datetime.date, datetime.datetime]], int)

# BETWEEN = 'BETWEEN'
# COUNT(DISTINCT)

class String(FunctionsABC):
    ASCII = Func(b'ASCII')
    ASIN = Func(b'ASIN')
    BIN = Func(b'BIN')
    CAST = Func(b'CAST')
    CHAR = Func(b'CHAR')
    CHARACTER_LENGTH = Func(b'CHARACTER_LENGTH')
    CHAR_LENGTH = Func(b'CHAR_LENGTH')
    COALESCE = Func(b'COALESCE')
    CONCAT = Func(b'CONCAT')
    CONCAT_WS = Func(b'CONCAT_WS')
    CONVERT = Func(b'CONVERT')
    DATABASE = Func(b'DATABASE')
    ELT = Func(b'ELT')
    EXPORT_SET = Func(b'EXPORT_SET')
    FIELD = Func(b'FIELD')
    FIND_IN_SET = Func(b'FIND_IN_SET')
    FORMAT_PICO_TIME = Func(b'FORMAT_PICO_TIME')
    FOUND_ROWS = Func(b'FOUND_ROWS')
    FROM_BASE64 = Func(b'FROM_BASE64')
    GREATEST = Func(b'GREATEST')
    HEX = Func(b'HEX')
    ICU_VERSION = Func(b'ICU_VERSION')
    INSERT = Func(b'INSERT')
    INSTR = Func(b'INSTR')
    INTERVAL = Func(b'INTERVAL')
    ISNULL = Func(b'ISNULL')
    LAST_INSERT_ID = Func(b'LAST_INSERT_ID')
    LCASE = Func(b'LCASE')
    LEAST = Func(b'LEAST')
    LEFT = Func(b'LEFT')
    LENGTH = Func(b'LENGTH')
    LIKE = OP.LIKE
    LOAD_FILE = Func(b'LOAD_FILE')
    LOCATE = Func(b'LOCATE')
    LOWER = Func(b'LOWER')
    LPAD = Func(b'LPAD')
    LTRIM = Func(b'LTRIM')
    MAKEDATE = Func(b'MAKEDATE')
    MAKETIME = Func(b'MAKETIME')
    MAKE_SET = Func(b'MAKE_SET')
    MATCH = Func(b'MATCH')
    MID = Func(b'MID')
    OCT = Func(b'OCT')
    OCTET_LENGTH = Func(b'OCTET_LENGTH')
    OR = Func(b'OR')
    ORD = Func(b'ORD')
    POSITION = Func(b'POSITION')
    QUOTE = Func(b'QUOTE')
    RANK = Func(b'RANK')
    REGEXP = OP.REGEXP
    RLIKE = OP.RLIKE
    REGEXP_INSTR = Func(b'REGEXP_INSTR')
    REGEXP_LIKE = Func(b'REGEXP_LIKE')
    REGEXP_REPLACE = Func(b'REGEXP_REPLACE')
    REGEXP_SUBSTR = Func(b'REGEXP_SUBSTR')
    REPEAT = Func(b'REPEAT')
    REPLACE = Func(b'REPLACE')
    REVERSE = Func(b'REVERSE')
    RIGHT = Func(b'RIGHT')
    ROLES_GRAPHML = Func(b'ROLES_GRAPHML')
    ROW_COUNT = Func(b'ROW_COUNT')
    RPAD = Func(b'RPAD')
    RTRIM = Func(b'RTRIM')
    SCHEMA = Func(b'SCHEMA')
    SESSION_USER = Func(b'SESSION_USER')
    SOUNDEX = Func(b'SOUNDEX')
    SPACE = Func(b'SPACE')
    STRCMP = Func(b'STRCMP')
    SUBDATE = Func(b'SUBDATE')
    SUBSTR = Func(b'SUBSTR')
    SUBSTRING = Func(b'SUBSTRING')
    SUBSTRING_INDEX = Func(b'SUBSTRING_INDEX')
    SYSDATE = Func(b'SYSDATE')
    SYSTEM_USER = Func(b'SYSTEM_USER')
    TO_BASE64 = Func(b'TO_BASE64')
    TRIM = Func(b'TRIM')
    UCASE = Func(b'UCASE')
    UNHEX = Func(b'UNHEX')
    UPPER = Func(b'UPPER')
    USER = Func(b'USER')
    VERSION = Func(b'VERSION')
    WEIGHT_STRING = Func(b'WEIGHT_STRING')

class XML(FunctionsABC):
    ExtractValue = Func(b'ExtractValue', [Ext, Ext], Ext)
    UpdateXML = Func(b'UpdateXML', [str, str, str], Ext)

class Bit(FunctionsABC):
    AND_OP  = OP.BIT_AND_OP
    OR_OP   = OP.BIT_OR_OP
    XOR_OP  = OP.BIT_XOR_OP
    INV     = OP.BIT_INV
    RSHIFT  = OP.BIT_RSHIFT
    LSHIFT  = OP.BIT_LSHIFT
    AND     = Func(b'BIT_AND')
    COUNT   = Func(b'BIT_COUNT')
    LENGTH  = Func(b'BIT_LENGTH')
    OR      = Func(b'BIT_OR')
    XOR     = Func(b'BIT_XOR')

class Encryption(FunctionsABC):
    AES_DECRYPT = Func(b'AES_DECRYPT')
    AES_ENCRYPT = Func(b'AES_ENCRYPT')
    COMPRESS = Func(b'COMPRESS')
    MD5 = Func(b'MD5')
    RANDOM_BYTES = Func(b'RANDOM_BYTES')
    SHA1 = Func(b'SHA1')
    SHA2 = Func(b'SHA2')
    STATEMENT_DIGEST = Func(b'STATEMENT_DIGEST')
    STATEMENT_DIGEST_TEXT = Func(b'STATEMENT_DIGEST_TEXT')
    UNCOMPRESS = Func(b'UNCOMPRESS')
    UNCOMPRESSED_LENGTH = Func(b'UNCOMPRESSED_LENGTH')
    VALIDATE_PASSWORD_STRENGTH = Func(b'VALIDATE_PASSWORD_STRENGTH')

class Lock(FunctionsABC):
    GET_LOCK = Func(b'GET_LOCK')
    IS_FREE_LOCK = Func(b'IS_FREE_LOCK')
    IS_USED_LOCK = Func(b'IS_USED_LOCK')
    RELEASE_ALL_LOCKS = Func(b'RELEASE_ALL_LOCKS')
    RELEASE_LOCK = Func(b'RELEASE_LOCK')

class Info(FunctionsABC):
    BENCHMARK = Func(b'BENCHMARK')
    CHARSET = Func(b'CHARSET')
    COERCIBILITY = Func(b'COERCIBILITY')
    COLLATION = Func(b'COLLATION')
    CONNECTION_ID = Func(b'CONNECTION_ID')
    CURRENT_ROLE = Func(b'CURRENT_ROLE')
    CURRENT_USER = Func(b'CURRENT_USER')
    CURRENT_USER_ = NoArgsFunc(b'CURRENT_USER')

class Agg(FunctionsABC):
    AVG = Func(b'AVG')
    COUNT = Func(b'COUNT')
    GROUP_CONCAT = Func(b'GROUP_CONCAT')
    MAX = Func(b'MAX')
    MIN = Func(b'MIN')
    STD = Func(b'STD')
    STDDEV = Func(b'STDDEV')
    STDDEV_POP = Func(b'STDDEV_POP')
    STDDEV_SAMP = Func(b'STDDEV_SAMP')
    SUM = Func(b'SUM')
    VARIANCE = Func(b'VARIANCE')
    VAR_POP = Func(b'VAR_POP')
    VAR_SAMP = Func(b'VAR_SAMP')

class Window(FunctionsABC):
    CUME_DIST = Func(b'CUME_DIST')
    DENSE_RANK = Func(b'DENSE_RANK')
    FIRST_VALUE = Func(b'FIRST_VALUE')
    LAG = Func(b'LAG')
    LAST_VALUE = Func(b'LAST_VALUE')
    LEAD = Func(b'LEAD')
    NTH_VALUE = Func(b'NTH_VALUE')
    NTILE = Func(b'NTILE')
    PERCENT_RANK = Func(b'PERCENT_RANK')
    ROW_NUMBER = Func(b'ROW_NUMBER')

class PeformanceSchema(FunctionsABC):
    FORMAT = Func(b'FORMAT')
    FORMAT_BYTES = Func(b'FORMAT_BYTES')
    PS_CURRENT_THREAD_ID = Func(b'PS_CURRENT_THREAD_ID')
    PS_THREAD_ID = Func(b'PS_THREAD_ID')

class Internal(FunctionsABC):
    CAN_ACCESS_COLUMN = Func(b'CAN_ACCESS_COLUMN')
    CAN_ACCESS_DATABASE = Func(b'CAN_ACCESS_DATABASE')
    CAN_ACCESS_TABLE = Func(b'CAN_ACCESS_TABLE')
    CAN_ACCESS_USER = Func(b'CAN_ACCESS_USER')
    CAN_ACCESS_VIEW = Func(b'CAN_ACCESS_VIEW')
    GET_DD_COLUMN_PRIVILEGES = Func(b'GET_DD_COLUMN_PRIVILEGES')
    GET_DD_CREATE_OPTIONS = Func(b'GET_DD_CREATE_OPTIONS')
    GET_DD_INDEX_SUB_PART_LENGTH = Func(b'GET_DD_INDEX_SUB_PART_LENGTH')
    AUTO_INCREMENT = Func(b'INTERNAL_AUTO_INCREMENT')
    AVG_ROW_LENGTH = Func(b'INTERNAL_AVG_ROW_LENGTH')
    CHECKSUM = Func(b'INTERNAL_CHECKSUM')
    CHECK_TIME = Func(b'INTERNAL_CHECK_TIME')
    DATA_FREE = Func(b'INTERNAL_DATA_FREE')
    DATA_LENGTH = Func(b'INTERNAL_DATA_LENGTH')
    DD_CHAR_LENGTH = Func(b'INTERNAL_DD_CHAR_LENGTH')
    GET_COMMENT_OR_ERROR = Func(b'INTERNAL_GET_COMMENT_OR_ERROR')
    GET_ENABLED_ROLE_JSON = Func(b'INTERNAL_GET_ENABLED_ROLE_JSON')
    GET_HOSTNAME = Func(b'INTERNAL_GET_HOSTNAME')
    GET_USERNAME = Func(b'INTERNAL_GET_USERNAME')
    GET_VIEW_WARNING_OR_ERROR = Func(b'INTERNAL_GET_VIEW_WARNING_OR_ERROR')
    INDEX_COLUMN_CARDINALITY = Func(b'INTERNAL_INDEX_COLUMN_CARDINALITY')
    INDEX_LENGTH = Func(b'INTERNAL_INDEX_LENGTH')
    IS_ENABLED_ROLE = Func(b'INTERNAL_IS_ENABLED_ROLE')
    IS_MANDATORY_ROLE = Func(b'INTERNAL_IS_MANDATORY_ROLE')
    KEYS_DISABLED = Func(b'INTERNAL_KEYS_DISABLED')
    MAX_DATA_LENGTH = Func(b'INTERNAL_MAX_DATA_LENGTH')
    TABLE_ROWS = Func(b'INTERNAL_TABLE_ROWS')
    UPDATE_TIME = Func(b'INTERNAL_UPDATE_TIME')

class JSON(FunctionsABC):
    MEMBER_OF = Func(b'MEMBER_OF')
    ARRAY = Func(b'JSON_ARRAY')
    ARRAYAGG = Func(b'JSON_ARRAYAGG')
    ARRAY_APPEND = Func(b'JSON_ARRAY_APPEND')
    ARRAY_INSERT = Func(b'JSON_ARRAY_INSERT')
    CONTAINS = Func(b'JSON_CONTAINS')
    CONTAINS_PATH = Func(b'JSON_CONTAINS_PATH')
    DEPTH = Func(b'JSON_DEPTH')
    EXTRACT = Func(b'JSON_EXTRACT')
    INSERT = Func(b'JSON_INSERT')
    KEYS = Func(b'JSON_KEYS')
    LENGTH = Func(b'JSON_LENGTH')
    MERGE = Func(b'JSON_MERGE')
    MERGE_PATCH = Func(b'JSON_MERGE_PATCH')
    MERGE_PRESERVE = Func(b'JSON_MERGE_PRESERVE')
    OBJECT = Func(b'JSON_OBJECT')
    OBJECTAGG = Func(b'JSON_OBJECTAGG')
    OVERLAPS = Func(b'JSON_OVERLAPS')
    PRETTY = Func(b'JSON_PRETTY')
    QUOTE = Func(b'JSON_QUOTE')
    REMOVE = Func(b'JSON_REMOVE')
    REPLACE = Func(b'JSON_REPLACE')
    SCHEMA_VALID = Func(b'JSON_SCHEMA_VALID')
    SCHEMA_VALIDATION_REPORT = Func(b'JSON_SCHEMA_VALIDATION_REPORT')
    SEARCH = Func(b'JSON_SEARCH')
    SET = Func(b'JSON_SET')
    STORAGE_FREE = Func(b'JSON_STORAGE_FREE')
    STORAGE_SIZE = Func(b'JSON_STORAGE_SIZE')
    TABLE = Func(b'JSON_TABLE')
    TYPE = Func(b'JSON_TYPE')
    UNQUOTE = Func(b'JSON_UNQUOTE')
    VALID = Func(b'JSON_VALID')
    VALUE = Func(b'JSON_VALUE')

class GTID(FunctionsABC):
    GTID_SUBSET = Func(b'GTID_SUBSET')
    GTID_SUBTRACT = Func(b'GTID_SUBTRACT')
    WAIT_FOR_EXECUTED_GTID_SET = Func(b'WAIT_FOR_EXECUTED_GTID_SET')
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = Func(b'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS')

class Spatial(FunctionsABC):
    GeomCollection = Func(b'GeomCollection')
    GeometryCollection = Func(b'GeometryCollection')
    LineString = Func(b'LineString')
    MBR_Contains = Func(b'MBRContains')
    MBR_CoveredBy = Func(b'MBRCoveredBy')
    MBR_Covers = Func(b'MBRCovers')
    MBR_Disjoint = Func(b'MBRDisjoint')
    MBR_Equals = Func(b'MBREquals')
    MBR_Intersects = Func(b'MBRIntersects')
    MBR_Overlaps = Func(b'MBROverlaps')
    MBR_Touches = Func(b'MBRTouches')
    MBR_Within = Func(b'MBRWithin')
    MultiLineString = Func(b'MultiLineString')
    MultiPoint = Func(b'MultiPoint')
    MultiPolygon = Func(b'MultiPolygon')
    Point = Func(b'Point')
    Polygon = Func(b'Polygon')
    Area = Func(b'ST_Area')
    AsBinary = Func(b'ST_AsBinary')
    AsGeoJSON = Func(b'ST_AsGeoJSON')
    AsText = Func(b'ST_AsText')
    Buffer = Func(b'ST_Buffer')
    Buffer_Strategy = Func(b'ST_Buffer_Strategy')
    Centroid = Func(b'ST_Centroid')
    Collect = Func(b'ST_Collect')
    Contains = Func(b'ST_Contains')
    ConvexHull = Func(b'ST_ConvexHull')
    Crosses = Func(b'ST_Crosses')
    Difference = Func(b'ST_Difference')
    Dimension = Func(b'ST_Dimension')
    Disjoint = Func(b'ST_Disjoint')
    Distance = Func(b'ST_Distance')
    Distance_Sphere = Func(b'ST_Distance_Sphere')
    EndPoint = Func(b'ST_EndPoint')
    Envelope = Func(b'ST_Envelope')
    Equals = Func(b'ST_Equals')
    ExteriorRing = Func(b'ST_ExteriorRing')
    FrechetDistance = Func(b'ST_FrechetDistance')
    GeoHash = Func(b'ST_GeoHash')
    GeomCollFromText = Func(b'ST_GeomCollFromText')
    GeomCollFromWKB = Func(b'ST_GeomCollFromWKB')
    GeomFromGeoJSON = Func(b'ST_GeomFromGeoJSON')
    GeomFromText = Func(b'ST_GeomFromText')
    GeomFromWKB = Func(b'ST_GeomFromWKB')
    GeometryN = Func(b'ST_GeometryN')
    GeometryType = Func(b'ST_GeometryType')
    HausdorffDistance = Func(b'ST_HausdorffDistance')
    InteriorRingN = Func(b'ST_InteriorRingN')
    Intersection = Func(b'ST_Intersection')
    Intersects = Func(b'ST_Intersects')
    IsClosed = Func(b'ST_IsClosed')
    IsEmpty = Func(b'ST_IsEmpty')
    IsSimple = Func(b'ST_IsSimple')
    IsValid = Func(b'ST_IsValid')
    LatFromGeoHash = Func(b'ST_LatFromGeoHash')
    Latitude = Func(b'ST_Latitude')
    Length = Func(b'ST_Length')
    LineFromText = Func(b'ST_LineFromText')
    LineFromWKB = Func(b'ST_LineFromWKB')
    LineInterpolatePoint = Func(b'ST_LineInterpolatePoint')
    LineInterpolatePoints = Func(b'ST_LineInterpolatePoints')
    LongFromGeoHash = Func(b'ST_LongFromGeoHash')
    Longitude = Func(b'ST_Longitude')
    MLineFromText = Func(b'ST_MLineFromText')
    MLineFromWKB = Func(b'ST_MLineFromWKB')
    MPointFromText = Func(b'ST_MPointFromText')
    MPointFromWKB = Func(b'ST_MPointFromWKB')
    MPolyFromText = Func(b'ST_MPolyFromText')
    MPolyFromWKB = Func(b'ST_MPolyFromWKB')
    MakeEnvelope = Func(b'ST_MakeEnvelope')
    NumGeometries = Func(b'ST_NumGeometries')
    NumInteriorRing = Func(b'ST_NumInteriorRing')
    NumPoints = Func(b'ST_NumPoints')
    Overlaps = Func(b'ST_Overlaps')
    PointAtDistance = Func(b'ST_PointAtDistance')
    PointFromGeoHash = Func(b'ST_PointFromGeoHash')
    PointFromText = Func(b'ST_PointFromText')
    PointFromWKB = Func(b'ST_PointFromWKB')
    PointN = Func(b'ST_PointN')
    PolyFromText = Func(b'ST_PolyFromText')
    PolyFromWKB = Func(b'ST_PolyFromWKB')
    SRID = Func(b'ST_SRID')
    Simplify = Func(b'ST_Simplify')
    StartPoint = Func(b'ST_StartPoint')
    SwapXY = Func(b'ST_SwapXY')
    SymDifference = Func(b'ST_SymDifference')
    Touches = Func(b'ST_Touches')
    Transform = Func(b'ST_Transform')
    Union = Func(b'ST_Union')
    Validate = Func(b'ST_Validate')
    Within = Func(b'ST_Within')
    X = Func(b'ST_X')
    Y = Func(b'ST_Y')

class Other(FunctionsABC):
    ANY_VALUE = Func(b'ANY_VALUE')
    BIN_TO_UUID = Func(b'BIN_TO_UUID')
    DEFAULT = Func(b'DEFAULT')
    GROUPING = Func(b'GROUPING')
    INET6_ATON = Func(b'INET6_ATON')
    INET6_NTOA = Func(b'INET6_NTOA')
    INET_ATON = Func(b'INET_ATON')
    INET_NTOA = Func(b'INET_NTOA')
    IS_IPV4 = Func(b'IS_IPV4')
    IS_IPV4_COMPAT = Func(b'IS_IPV4_COMPAT')
    IS_IPV4_MAPPED = Func(b'IS_IPV4_MAPPED')
    IS_IPV6 = Func(b'IS_IPV6')
    IS_UUID = Func(b'IS_UUID')
    MASTER_POS_WAIT = Func(b'MASTER_POS_WAIT')
    NAME_CONST = Func(b'NAME_CONST')
    SLEEP = Func(b'SLEEP')
    UUID = Func(b'UUID')
    UUID_SHORT = Func(b'UUID_SHORT')
    UUID_TO_BIN = Func(b'UUID_TO_BIN')
    VALUES = Func(b'VALUES')
